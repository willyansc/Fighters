<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
       default-autowire="byName">

    <!-- context:property-placeholder location="classpath:mysql.properties"
        / -->
    <!-- 定义使用C3P0连接池的数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 指定连接数据库的JDBC驱动 -->
        <property name="driverClass">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <!-- 连接数据库所用的URL -->
        <property name="jdbcUrl">
            <value>jdbc:mysql://localhost/whale?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=5000&amp;socketTimeout=10000</value>
        </property>
        <!-- 连接数据库的用户名 -->
        <property name="user">
            <value>root</value>
        </property>
        <!-- 连接数据库的密码 -->
        <property name="password">
            <value></value>
        </property>
        <!-- 设置数据库连接池的最大连接数 -->
        <property name="maxPoolSize">
            <value>20</value>
        </property>
        <!-- 设置数据库连接池的最小连接数 -->
        <property name="minPoolSize">
            <value>3</value>
        </property>
        <!-- 设置数据库连接池的初始化连接数 -->
        <property name="initialPoolSize">
            <value>10</value>
        </property>
        <!-- 设置数据库连接池的连接的最大空闲时间,单位为秒 -->
        <property name="maxIdleTime">
            <value>2</value>
        </property>
    </bean>

    <!-- jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 集成myBaits框架,配置sqlSessionFatory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:/dao/mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- 数据库的事务管理器配置 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="batchSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <constructor-arg index="1" value="BATCH" />
    </bean>

    <!--配置事务处理策略，transaction-manager属性指定事务管理器。若事务管理器bean的id即为transactionManager，则transaction-manager的属性可以不指定-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--&lt;!&ndash;所有以find开头的方法都是只读的&ndash;&gt;-->
            <!--<tx:method name="find*" read-only="true" />-->
            <!--<tx:method name="save*" />-->
            <!--其他方法使用默认事务策略-->
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
<!-- todo 事务-->
<!--    &lt;!&ndash; AOP配置&ndash;&gt;
    <aop:config>
        <aop:pointcut id="myPointcut"
                      expression="(execution(* com.meituan.hotel.sc.service.*.*(..))"/>
        &lt;!&ndash;将定义好的事务处理策略应用到上述的切入点&ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
    </aop:config>-->

</beans>
